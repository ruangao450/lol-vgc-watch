name: Monitor LoL (per region) & VGC ‚Äì TEST

on:
  schedule:
    - cron: "*/10 * * * *"     # her 10 dakikada bir
  workflow_dispatch: {}         # elle tetikleme

permissions:
  contents: read

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # .state klas√∂r√ºn√º sakla/geri y√ºkle (rolling cache)
      - name: Load previous state (rolling cache)
        uses: actions/cache@v4
        with:
          path: .state
          key: state-${{ runner.os }}-${{ github.run_number }}
          restore-keys: |
            state-${{ runner.os }}-

      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      # (Te≈ühis) Webhook gizlisi var mƒ±? (uzunluƒüu yazdƒ±r ‚Äì i√ßerik maskelenir)
      - name: Check webhook secret presence
        run: |
          if [ -z "${DISCORD_WEBHOOK}" ]; then
            echo "‚ùå DISCORD_WEBHOOK is EMPTY"; exit 1
          fi
          echo "‚úÖ DISCORD_WEBHOOK length: ${#DISCORD_WEBHOOK}"
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}

      # (Te≈ühis) Minik bir duman testi: webhook'a kƒ±sa bir mesaj g√∂nder
      - name: Smoke test webhook
        run: |
          code=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Content-Type: application/json" \
            -d '{"content":"üß™ Webhook smoke test from GitHub Actions"}' \
            "${DISCORD_WEBHOOK}")
          echo "Webhook HTTP: $code"
          if [ "$code" -ge 400 ]; then echo "‚ùå Webhook failed"; exit 1; fi
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}

      # Asƒ±l izleyici
      - name: Run watcher
        run: node check.cjs
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          LOL_REGIONS: "euw,na,kr,br,lan,tr"
          ALWAYS_SEND: "1"   # her √ßalƒ±≈ütƒ±rmada mesaj atsƒ±n (testten sonra kaldƒ±r)
          DEBUG: "1"         # denenen URL/HTTP kodlarƒ±nƒ± log ve mesaja yaz (testten sonra kaldƒ±r)
